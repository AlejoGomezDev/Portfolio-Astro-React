---
import SkillCard from "../atoms/SkillCard.astro";
const { category, items } = Astro.props;

interface Skill {
  name: string;
  icon: string;
  alt: string;
}

interface SkillGroup {
  type:string
  skills: Skill[];
}

interface SingleSkill {
  name: string;
  icon: string;
  alt: string;
}

type Item = SkillGroup | SingleSkill;
---

<style>

  #category-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 1rem;
    padding: 1rem;
  }
  
  #extra-skill-container {
    grid-column: 1 / -1;
  }
  
  #extra-skill-container > div {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
    gap: 1rem;
  }
  
  @media (max-width: 480px) {
    #category-container, 
    #extra-skill-container > div {
      justify-items: center
      grid-template-columns: repeat(auto-fit,60px);
      gap: 0.5rem;
    }
    
  }
</style>

<fieldset id="individual-category" class="text-center text-white w-full max-w-full m-auto border-1 rounded-xl mb-8 border-1 border-violet-border">
  <legend class="text-xl sm:text-3xl text-left ml-3 px-5">{category}</legend>
  <div id="category-container">
    {
      items.map((item: Item) => {
        if ("skills" in item) {
          return (
            <fieldset id="extra-skill-container" class="flex flex-col border-1 rounded-xl border-1 sm:mx-3 border-violet-border">
              <legend class="text-lg text-left px-3 ml-2">{item.type}</legend>
              <div class="px-4 pb-4">
                {
                  item.skills.map((skill: Skill) => (
                    <SkillCard skill={skill}/>
                  ))
                }
              </div>
            </fieldset>
          );
        } else {
          return (
            <SkillCard skill={item}/>
          );
        }
      })
    }
  </div>
</fieldset>