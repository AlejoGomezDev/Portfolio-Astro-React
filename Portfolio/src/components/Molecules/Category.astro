---
import SkillCard from "../atoms/SkillCard.astro";
const { category, items } = Astro.props;

interface Skill {
  name: string;
  icon: string;
  alt: string;
}

interface SkillGroup {
  type: string;
  skills: Skill[];
}

interface SingleSkill {
  name: string;
  icon: string;
  alt: string;
}

type Item = SkillGroup | SingleSkill;

function isSkillGroup(item: Item): item is SkillGroup {
  return "skills" in item;
}

// Separar en individuales y grupos
const individualSkills = items.filter(item => !isSkillGroup(item)) as SingleSkill[];
const skillGroups = items.filter(isSkillGroup);
---

<style>
  .skill-list {
    display: flex;
    flex-wrap: wrap;
    gap: 3rem;
    padding: 1rem;
    justify-content: flex-start;
  }

  @media (max-width: 480px) {
    .skill-list {
      justify-content: left;
      gap: 1rem;
    }
  }

</style>

<fieldset id="individual-category" class="text-white w-full max-w-full m-auto border border-zinc-800 bg-neutral-900 rounded-2xl mb-8">
  <legend class="text-xl sm:text-3xl text-left ml-3">{category}</legend>
  <div class="flex flex-col w-full p-4 gap-4">

    {individualSkills.length > 0 && (
      <div class="skill-list">
        {individualSkills.map(skill => (
          <SkillCard skill={skill} />
        ))}
      </div>
    )}

    {skillGroups.map(group => (
      <fieldset id="extra-skill-container" class="w-full max-w-9/10 border border-zinc-800 rounded-2xl m-auto last:mb-8">
        <legend class="text-lg text-left ml-2">{group.type}</legend>
        <div class="skill-list">
          {group.skills.map(skill  => (
            <SkillCard skill={skill} />
          ))}
        </div>
      </fieldset>
    ))}

  </div>
</fieldset>
